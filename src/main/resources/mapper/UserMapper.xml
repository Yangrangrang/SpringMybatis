<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- sessionFactory 가 작성한 sql Mapper 를  해당 타입으로 객체를 생성한다.-->
<mapper namespace="com.bigdata6.spring_mybatis.mapper.UserMapper">
<!--    찾아갈수 있도록 입력: namespace-->
<!--    id : 해당 타입의 method 이름-->
    <select id="findAll" resultType="com.bigdata6.spring_mybatis.dto.UserDto">
        SELECT * FROM USER
    </select>
<!--    #{필드명} : 필드의 값을 value로 대입, user_id=#{id} => user_id='user1' -->
<!--    ${필드명} : 필드의 값을 예약어나 필드명으로 대입, ORDER BY ${order} => ORDER BY user_id -->
<!--    List<UserDto> findPaging(paginDto)-->
    <select id="findPaging"
            resultType = "com.bigdata6.spring_mybatis.dto.UserDto"
            parameterType = "com.bigdata6.spring_mybatis.dto.PagingDto">
        SELECT * FROM USER
        <if test="orderField!=null">
            ORDER BY ${orderField} ${direct}
        </if>
        LIMIT #{startRow},#{rows}
    </select>
<!--    int count(PagingDto paging);-->
    <select id="count"
            resultType="int"
            parameterType="com.bigdata6.spring_mybatis.dto.PagingDto">
        SELECT COUNT(*) FROM USER
    </select>
<!--    CRUD. T findById(P id) => UserDto fingById(String id) -->
<!--    parameterType은 거의 생략한다. 두개가 오면 더더욱 쓸필요없다.-->
    <select id="findById" resultType="UserDto" parameterType="String">
        SELECT * FROM USER WHERE user_id=#{id}
    </select>
<!--    int updateById(UserDto dto)-->
    <update id="updateById" parameterType="UserDto">
        UPDATE USER SET
            name=#{name},
            pw=#{pw},
            phone=#{phone},
            email=#{email},
            birth=#{birth},
            signup=#{signup}
            WHERE user_id=#{user_id}
    </update>
<!--    int insert(UserDto dto);-->
    <insert id="insert" parameterType="UserDto">
        INSERT INTO USER (user_id,name,pw,phone,email,birth) VALUES
        (#{user_id},#{name},#{pw},#{phone},#{email},#{birth})
    </insert>
<!--    int deleteById(String id);-->
<!--    변수명이랑 똑같아야한다 id > id-->
    <delete id="deleteById" parameterType="String">
        DELETE FROM USER WHERE user_id=#{id}
    </delete>
<!--    UserDto findByUserIdAndPw(String userId, String pw);-->
<!--    두개의 parameterType이 온다면 참조로 작성 ( .)-->
    <select id="findByUserIdAndPw" resultType="UserDto">
        SELECT * FROM USER WHERE user_id=#{userId} AND pw=#{pw}
    </select>
</mapper>